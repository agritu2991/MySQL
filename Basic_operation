-- Create complex tables

CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR (40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
);

ALTER TABLE employee ADD last_name VARCHAR (40);

ALTER TABLE employee MODIFY last_name VARCHAR (40) AFTER first_name;

SELECT * FROM employee;

SELECT * FROM Branch;

DESCRIBE employee;

CREATE TABLE Branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id) REFERENCES Branch(branch_id) ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id) REFERENCES employee(emp_id) ON DELETE SET NULL;


CREATE TABLE client(
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES Branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
    FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id, supplier_name),
    FOREIGN KEY(branch_id) REFERENCES Branch(branch_id) ON DELETE CASCADE
);

-- Putting values into table

-- cooperate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO Branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id =100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO Branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id=2
WHERE emp_id =102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO Branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id=3
WHERE emp_id=106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patrict Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-Ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

SELECT * FROM branch_supplier;

INSERT INTO client VALUES(400, 'Dunmore highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly law LLC', 3);
INSERT INTO client VALUES(404, 'Sranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

SELECT * FROM client;

INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

-- basic queries 

-- Find all employees

SELECT * 
FROM employee;

-- Find all clients

SELECT *
FROM client;

-- Find all employees ordered by salary

SELECT *
FROM employee
ORDER BY salary ASC;

-- Find all employees ordered by sex then name

SELECT *
FROM employee
ORDER BY sex, first_name, last_name;

-- find the first 5 employees in the table

SELECT *
FROM employee
LIMIT 5;

-- find the first or forename and last names of the employees
-- or change the column name

SELECT first_name AS forename, last_name AS surname
FROM employee;

-- find out all the different gender

SELECT DISTINCT sex
FROM employee;

c…. Functions: block of statements that do something for us like calculate sum or averages, counts etc.

-- Find the number of employees

SELECT COUNT(emp_id)
FROM employee;

-- find how many employees are supervisor

SELECT COUNT(DISTINCT super_id)
FROM employee;

-- find the number of female employees born after 1970

SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01'; 

-- find the average of all employee's salaries

SELECT AVG(salary)
FROM employee;

-- find the sum of all employee's salaries

SELECT SUM(salary)
FROM employee;

-- Aggregation queries
-- 1. Find out how many males and females there are : group the
-- information by sex of employee.

SELECT COUNT(emp_id), sex
FROM employee
GROUP BY sex;

-- 2. Find the total sales of each salesman

SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;

-- how much money each client actually spent for

SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;

d… Wildcards: there are two wildcards in SQL % = any # characters, _ = one character

These wildcards used with special SQL keyword LIKE ‘’ if it exist in column then the statement use in where clause will be true.

% use for any number of characters are similar to characters given in parentheses. It says any number of characters come before character given after the % sign

Eg %LLC so John Daly Law came before LLC hence we used % sign here

-- Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '_LLC'; 

Output is 



-- Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE ‘%LLC';
 


-- Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC'; 

-- find any branch suppliers who are in the label business

SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%lab%';

-- find any employee born in October

SELECT *
FROM employee
WHERE birth_day LIKE '____-10%';

--find any clients who are schools

SELECT *
FROM client
WHERE client_name LIKE '%school%';





e… Union: 

Union is used to combine two results from the select statement into one use in relational database systems.

Rules are: both the queries in SELECT statement should have same number of columns and data types.

-- find list of employees and branch names

SELECT first_name AS company_names FROM employee
UNION
SELECT branch_name FROM Branch;

-- find a list of all clients & branch supplier's names

SELECT client_name, client.branch_id
FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id
FROM branch_supplier;

-- find a list of all money spent or earned by the company

SELECT salary AS spent&earned
FROM employee
UNION
SELECT total_sales 
FROM works_with;

-- find all branches and names of their managers

SELECT employee.emp_id, employee.first_name, employee.last_name,branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = Branch.mgr_id;


